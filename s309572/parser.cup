/*************************
 Parser
**************************/

import java_cup.runtime.*;
import java.util.*;
import java.io.*;

init with{:
    table = new HashMap<String, Object>();
:}

parser code 	{:

    public static HashMap table;

    public void report_error(String message, Object info) {
        StringBuffer m = new StringBuffer(message);
        if (info instanceof Symbol) {
            if (((Symbol)info).left != 1 && ((Symbol)info).right != 1) {
                if (((Symbol)info).left != -1 && ((Symbol)info).right != -1) {
                    int line = (((Symbol)info).left) + 1;
                    int column = (((Symbol)info).right) + 1;
                    m.append(" (line " + line + " column " + column + ")");
                }
            }
            System.err.println(m);
        }
    }
    
    public Object stack(int position) {
        try{
            return (((Symbol)stack.elementAt(tos + position)).value);
        }catch (Exception e){
            return null;
        }
    }
:};

action code {:
:}

//////////////////////////////////
///// SYMBOLS DECLARATION
/////////////////////////////////

terminal TOKEN_1, TOKEN_2, TOKEN_3, SEPARATOR,
SC, 
AND, OR, NOT, TRUE, FALSE, 
LPAREN, RPAREN,
INTEGER, ID, EXEC, IF, ASS, MAX;

non terminal goal, header, header_1, header_2,
token_1_list_v1, token_2_list_v1,
token_1_3_mix_list,
bool_exp, instructions,
instr, exec, if, max, ass, ids, integers;


precedence left OR;
precedence left AND;
precedence right NOT;

//////////////////////////////////
///// GRAMMAR
/////////////////////////////////

start with goal;

goal ::= header SEPARATOR instructions;

header ::= header_1 | header_2;

header_1 ::= token_1_list_v1 token_2_list_v1;

token_1_list_v1 ::= TOKEN_1 SC TOKEN_1 SC TOKEN_1 SC TOKEN_1 SC
| token_1_list_v1 TOKEN_1 SC;

header_2 ::= TOKEN_2 SC token_1_3_mix_list
| TOKEN_2 SC token_1_3_mix_list TOKEN_2 SC token_1_3_mix_list TOKEN_2 SC token_1_3_mix_list ;

token_2_list_v1 ::= TOKEN_2 SC TOKEN_2 SC TOKEN_2 SC
| TOKEN_2 SC TOKEN_2 SC TOKEN_2 SC TOKEN_2 SC TOKEN_2 SC TOKEN_2 SC TOKEN_2 SC TOKEN_2 SC TOKEN_2 SC
| TOKEN_2 SC TOKEN_2 SC TOKEN_2 SC TOKEN_2 SC TOKEN_2 SC TOKEN_2 SC TOKEN_2 SC TOKEN_2 SC TOKEN_2 SC TOKEN_2 SC;


token_1_3_mix_list ::= 
| token_1_3_mix_list TOKEN_1 SC
| token_1_3_mix_list TOKEN_3 SC;

instructions ::= instr:v_1 SC instr:v_2 SC instr:v_3 SC instr:v_4 SC instr:v_5 SC {:
    RESULT = new ArrayList<Boolean>();
    ((ArrayList<Boolean>) RESULT).add((Boolean) v_1);
    ((ArrayList<Boolean>) RESULT).add((Boolean) v_2);
    ((ArrayList<Boolean>) RESULT).add((Boolean) v_3);
    ((ArrayList<Boolean>) RESULT).add((Boolean) v_4);
    ((ArrayList<Boolean>) RESULT).add((Boolean) v_5);
:}
| instructions:list instr SC instr SC{:
    RESULT = list;
:};

instr ::= exec:v {:
    RESULT = v;
:} | max:v {:
    RESULT = v;
:} | ass:v {:
    RESULT = v;
:} | if:v {:
    RESULT = v;
:};

exec ::= EXEC bool_exp:v {:
    RESULT = v;
:};


bool_exp ::=  bool_exp:x AND bool_exp:y     {: RESULT = (Boolean) x && (Boolean) y; :} 
| bool_exp:x OR bool_exp:y                  {: RESULT = (Boolean) x || (Boolean) y; :} 
| NOT bool_exp:x                            {: RESULT = !(Boolean)x; :} %prec NOT 
| LPAREN bool_exp:x RPAREN                  {: RESULT = (Boolean)x; :} 
| ID:i                                      {: 
    if(parser.stack(-3)!=null){
        RESULT = (Boolean) parser.stack(-3);
    }else if(parser.stack(-5)!=null){
        RESULT = (Boolean) parser.stack(-5);
    }else if(parser.stack(-7)!=null){
        RESULT = (Boolean) parser.stack(-7);
    }else{
        System.out.println("only null values found");
        RESULT = true;
    }
:} 
| TRUE                                      {: RESULT = true; :} 
| FALSE                                     {: RESULT = false; :};

max ::= MAX integers:list {:
    System.out.println(Collections.max((ArrayList<Integer>) list));
    RESULT = true;
:};

integers ::= INTEGER:i {:
    RESULT = new ArrayList<Integer>();
    ((ArrayList<Integer>) RESULT).add((Integer)i);
:} | integers:list INTEGER:i {:
    RESULT = list;
    ((ArrayList<Integer>) RESULT).add((Integer)i);
:};

if ::= IF INTEGER:i_1 INTEGER:i_2{:
    if(parser.stack(-4)!=null && parser.stack(-6)!=null){
        if((Boolean)parser.stack(-4) && (Boolean)parser.stack(-6)){
            System.out.println(i_1);
            RESULT = true;
        }else{
            System.out.println(i_2);
            RESULT = false;
        }
    }else if(parser.stack(-3)!=null && parser.stack(-3) instanceof List<?>){
        List l = (ArrayList<Boolean>) parser.stack(-3);
        if((Boolean)l.get(4) && (Boolean)l.get(3)){
            System.out.println(i_1);
            RESULT = true;
        }else{
            System.out.println(i_2);
            RESULT = false;
        }
    }else {
        System.out.println("error");
            RESULT = false;
    }
:};

ass ::= ASS ids {:
    RESULT = true;
:};

ids ::= ID:v_1 {:
    if(parser.stack(-3)!=null){
        parser.table.put((String) v_1, (Boolean)parser.stack(-3));
    }else if(parser.stack(-2)!=null && parser.stack(-2) instanceof List<?>){
        List l = (ArrayList<Boolean>) parser.stack(-2);
        parser.table.put((String) v_1, (Boolean)l.get(4));
    }else {
        System.out.println("error");
        RESULT = false;
    }
:}
| ID:v_1 ID:v_2 {:
    if(parser.stack(-4)!=null){
        parser.table.put((String) v_1, (Boolean)parser.stack(-4));
        parser.table.put((String) v_2, (Boolean)parser.stack(-4));
    }else if(parser.stack(-3)!=null && parser.stack(-3) instanceof List<?>){
        List l = (ArrayList<Boolean>) parser.stack(-3);
        Boolean value = (Boolean)l.get(4);
        parser.table.put((String) v_1, value);
        parser.table.put((String) v_2, value);
    }else {
        System.out.println("error");
        RESULT = false;
    }
:}
| ID:v_1 ID:v_2 ID:v_3 {:
    if(parser.stack(-5)!=null){
        parser.table.put((String) v_1, (Boolean)parser.stack(-5));
        parser.table.put((String) v_2, (Boolean)parser.stack(-5));
        parser.table.put((String) v_3, (Boolean)parser.stack(-5));
    }else if(parser.stack(-4)!=null && parser.stack(-4) instanceof List<?>){
        List l = (ArrayList<Boolean>) parser.stack(-4);
        Boolean value = (Boolean)l.get(4);
        parser.table.put((String) v_1, value);
        parser.table.put((String) v_2, value);
        parser.table.put((String) v_3, value);
    }else {
        System.out.println("error");
        RESULT = false;
    }
:};
