/*************************
 Parser
**************************/

import java_cup.runtime.*;
import java.util.*;
import java.io.*;

init with{:
    symbolTable = new HashMap<String, Boolean>();
:}


parser code 	{:

    public static HashMap<String , Boolean> symbolTable;
    
    public void report_error(String message, Object info) {
        StringBuffer m = new StringBuffer(message);
        if (info instanceof Symbol) {
            if (((Symbol)info).left != 1 && ((Symbol)info).right != 1) {
                if (((Symbol)info).left != -1 && ((Symbol)info).right != -1) {
                    int line = (((Symbol)info).left) + 1;
                    int column = (((Symbol)info).right) + 1;
                    m.append(" (line " + line + " column " + column + ")");
                }
            }
            System.err.println(m);
        }
    }
    
    public Object stack(int position) {
        return (((Symbol)stack.elementAt(tos + position)).value);
    }
:};



//////////////////////////////////
///// SYMBOLS DECLARATION
/////////////////////////////////

terminal SEP, TOKEN1, TOKEN2, TOKEN3, EQ, SC, C, QS;

terminal Boolean BOOL;

terminal String WORD;

terminal MULTIIF, DIV, EXP1, EXP2, EXP3, ELSE, LBRACE;

terminal RBRACE, PRINT, AND, OR, NOT, LP, RP;

non terminal header, cod, token1l, token3l, token13l ;

non terminal instructionl, instruction, ass, loid, mult, STMN, e3, printl, BOOL_EXP;

non terminal goal;

precedence left OR;                                      // Logical OR
precedence left AND;                                     // Logical AND
precedence right NOT;                                    // Logical NOT



//////////////////////////////////
///// GRAMMAR
/////////////////////////////////

start with goal;

goal ::= header SEP cod ;

token1l ::= TOKEN1 SC  | token1l TOKEN1 SC ;

token3l ::= TOKEN3 SC  | token3l TOKEN3 SC ;

token13l ::= | token1l token3l | token3l token1l | token1l | token3l ;

header ::= token13l  | token13l  TOKEN2 SC token13l  TOKEN2 SC token13l | token13l  TOKEN2 SC token13l  TOKEN2 SC token13l  TOKEN2 SC token13l ;

cod ::= |instructionl ;

instructionl ::= instruction instruction instruction instruction instruction| instructionl instruction instruction;

instruction ::= ass | mult ;

ass ::= loid:map EQ BOOL_EXP:value SC {: 
HashMap<String, Boolean> mapCast = (HashMap<String, Boolean>) map;
for (Map.Entry<String, Boolean> entry : mapCast.entrySet()) {
            parser.symbolTable.put(entry.getKey(), (Boolean) value);
            System.out.println(entry.getKey() + "=" + value);
        }
 :};

loid ::= WORD:name {: 
    RESULT = new HashMap<String, Boolean>();
    ((HashMap<String, Boolean>) RESULT).put(name, null);
 :} 
| loid:map C WORD:name {: 
    RESULT = map;
    ((HashMap<String, Boolean>) RESULT).put(name, null);
:} ;

mult ::= MULTIIF EXP1 BOOL_EXP DIV EXP2 BOOL_EXP DIV e3 SC;

e3 ::= EXP3 BOOL_EXP STMN:x ELSE STMN:y {:
    Boolean e1 = ((Boolean) parser.stack(-3));
    Boolean e2 = ((Boolean) parser.stack(-6));
    Boolean e3 = ((Boolean) parser.stack(-9));
 
    if((e1 && e2 && e3) || (!e1 && !e2 && !e3)){
        ((ArrayList<String>) x).forEach( it -> System.out.println(it));
    }
    else{
        ((ArrayList<String>) y).forEach( it -> System.out.println(it));
    }
:};

STMN ::= LBRACE printl:list RBRACE{:
RESULT = ((ArrayList<String>) list);
:};

printl ::= PRINT QS:qs SC {:
    RESULT = new ArrayList<String>();
    ((ArrayList<String>) RESULT).add((String) qs);
:}
| printl:list PRINT QS:qs SC {:
    RESULT = list;
    ((ArrayList<String>) RESULT).add((String) qs);
:};

BOOL_EXP ::= BOOL_EXP:x AND BOOL_EXP:y {: RESULT = (Boolean) x && (Boolean) y; :}
| BOOL_EXP:x OR BOOL_EXP:y {: RESULT = (Boolean) x || (Boolean) y; :}
| NOT BOOL_EXP:value  {: RESULT = !(Boolean)value; :}
| LP BOOL_EXP:x AND BOOL_EXP:y RP  {: RESULT = (Boolean) x && (Boolean) y; :}
| LP BOOL_EXP:x OR BOOL_EXP:y RP {: RESULT = (Boolean) x || (Boolean) y; :}
| LP NOT BOOL_EXP:value RP {: RESULT = ! (Boolean) RESULT; :}
| LP BOOL:value RP {: RESULT = (Boolean) value; :}
| LP WORD:name RP {:
if( name.equals("true") || name.equals("false"))
    RESULT = Boolean.valueOf(name);
    else
    RESULT = parser.symbolTable.get(name);
:}
| BOOL:value {: RESULT = (Boolean) value; :}
| WORD:name {:
if( name.equals("true") || name.equals("false"))
    RESULT = Boolean.valueOf((String)name);
    else
    RESULT = parser.symbolTable.get(name);
:} ;




