/*************************
 Parser
**************************/

import java_cup.runtime.*;
import java.util.*;
import java.io.*;


parser code 	{:
    
    public void report_error(String message, Object info) {
        StringBuffer m = new StringBuffer(message);
        if (info instanceof Symbol) {
            if (((Symbol)info).left != 1 && ((Symbol)info).right != 1) {
                if (((Symbol)info).left != -1 && ((Symbol)info).right != -1) {
                    int line = (((Symbol)info).left) + 1;
                    int column = (((Symbol)info).right) + 1;
                    m.append(" (line " + line + " column " + column + ")");
                }
            }
            System.err.println(m);
        }
    }
    
    public Object stack(int position) {
        return (((Symbol)stack.elementAt(tos + position)).value);
    }
:};



//////////////////////////////////
///// SYMBOLS DECLARATION
/////////////////////////////////

terminal TOKEN_1, TOKEN_2, TOKEN_3, SEPARATOR, DIR,  SC,
 TO, REAL_NUMBER, KM, WORD, COMPUTE, COLON, PERCENT, KM_H,
 TYPE, COMMA, QUOTED_STRING, MINUS, EUR_KM, NUMBER,
 DISC, EUR;

non terminal goal, header, token_3_list, command, distance_list, time_list,
compute_list, distance, compute, element_list, destination_list, destination,
expense_list, time, expense, exp, disc;



//////////////////////////////////
///// GRAMMAR
/////////////////////////////////

start with goal;

goal ::= header SEPARATOR command;

header ::= token_3_list TOKEN_1 SC token_3_list TOKEN_1 SC token_3_list TOKEN_2 SC token_3_list |
        token_3_list TOKEN_2 SC token_3_list TOKEN_1 SC token_3_list TOKEN_1 SC token_3_list |
        token_3_list TOKEN_1 SC token_3_list TOKEN_2 SC token_3_list TOKEN_1 SC token_3_list;

token_3_list ::= | token_3_list TOKEN_3 SC;

command ::= distance_list compute_list | distance_list;

distance_list ::= distance distance distance | distance_list distance distance;

compute_list ::= compute | compute_list compute compute;

distance ::= QUOTED_STRING DIR destination_list SC ;

destination ::= QUOTED_STRING REAL_NUMBER KM;

destination_list ::= destination  |  destination COMMA destination_list  ;

compute ::= COMPUTE QUOTED_STRING TO QUOTED_STRING TYPE COLON element_list SC;

element_list ::= time_list | expense_list ;

time_list ::= time | time COMMA time_list;

time ::= NUMBER PERCENT NUMBER  KM_H;

expense_list ::= expense | expense COMMA expense_list;

expense ::= QUOTED_STRING exp MINUS disc | QUOTED_STRING disc MINUS exp|
QUOTED_STRING exp ;

exp ::= REAL_NUMBER EUR_KM;

disc ::= DISC REAL_NUMBER EUR;

